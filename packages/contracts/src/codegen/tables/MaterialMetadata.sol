// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { MaterialId } from "./../../libraries/LibMaterial.sol";

struct MaterialMetadataData {
  address tokenAddress;
  uint32 difficultyCoefficientNumerator;
  uint32 difficultyCoefficientDenominator;
}

library MaterialMetadata {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "MaterialMetadata", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004d6174657269616c4d65746164617461);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x001c030014040400000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes14)
  Schema constant _keySchema = Schema.wrap(0x000e01004d000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, uint32, uint32)
  Schema constant _valueSchema = Schema.wrap(0x001c030061030300000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "materialId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "tokenAddress";
    fieldNames[1] = "difficultyCoefficientNumerator";
    fieldNames[2] = "difficultyCoefficientDenominator";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get tokenAddress.
   */
  function getTokenAddress(MaterialId materialId) internal view returns (address tokenAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get tokenAddress.
   */
  function _getTokenAddress(MaterialId materialId) internal view returns (address tokenAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set tokenAddress.
   */
  function setTokenAddress(MaterialId materialId, address tokenAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((tokenAddress)), _fieldLayout);
  }

  /**
   * @notice Set tokenAddress.
   */
  function _setTokenAddress(MaterialId materialId, address tokenAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((tokenAddress)), _fieldLayout);
  }

  /**
   * @notice Get difficultyCoefficientNumerator.
   */
  function getDifficultyCoefficientNumerator(
    MaterialId materialId
  ) internal view returns (uint32 difficultyCoefficientNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get difficultyCoefficientNumerator.
   */
  function _getDifficultyCoefficientNumerator(
    MaterialId materialId
  ) internal view returns (uint32 difficultyCoefficientNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set difficultyCoefficientNumerator.
   */
  function setDifficultyCoefficientNumerator(MaterialId materialId, uint32 difficultyCoefficientNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreSwitch.setStaticField(
      _tableId,
      _keyTuple,
      1,
      abi.encodePacked((difficultyCoefficientNumerator)),
      _fieldLayout
    );
  }

  /**
   * @notice Set difficultyCoefficientNumerator.
   */
  function _setDifficultyCoefficientNumerator(MaterialId materialId, uint32 difficultyCoefficientNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((difficultyCoefficientNumerator)), _fieldLayout);
  }

  /**
   * @notice Get difficultyCoefficientDenominator.
   */
  function getDifficultyCoefficientDenominator(
    MaterialId materialId
  ) internal view returns (uint32 difficultyCoefficientDenominator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get difficultyCoefficientDenominator.
   */
  function _getDifficultyCoefficientDenominator(
    MaterialId materialId
  ) internal view returns (uint32 difficultyCoefficientDenominator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set difficultyCoefficientDenominator.
   */
  function setDifficultyCoefficientDenominator(
    MaterialId materialId,
    uint32 difficultyCoefficientDenominator
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreSwitch.setStaticField(
      _tableId,
      _keyTuple,
      2,
      abi.encodePacked((difficultyCoefficientDenominator)),
      _fieldLayout
    );
  }

  /**
   * @notice Set difficultyCoefficientDenominator.
   */
  function _setDifficultyCoefficientDenominator(
    MaterialId materialId,
    uint32 difficultyCoefficientDenominator
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreCore.setStaticField(
      _tableId,
      _keyTuple,
      2,
      abi.encodePacked((difficultyCoefficientDenominator)),
      _fieldLayout
    );
  }

  /**
   * @notice Get the full data.
   */
  function get(MaterialId materialId) internal view returns (MaterialMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(MaterialId materialId) internal view returns (MaterialMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    MaterialId materialId,
    address tokenAddress,
    uint32 difficultyCoefficientNumerator,
    uint32 difficultyCoefficientDenominator
  ) internal {
    bytes memory _staticData = encodeStatic(
      tokenAddress,
      difficultyCoefficientNumerator,
      difficultyCoefficientDenominator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    MaterialId materialId,
    address tokenAddress,
    uint32 difficultyCoefficientNumerator,
    uint32 difficultyCoefficientDenominator
  ) internal {
    bytes memory _staticData = encodeStatic(
      tokenAddress,
      difficultyCoefficientNumerator,
      difficultyCoefficientDenominator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(MaterialId materialId, MaterialMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.tokenAddress,
      _table.difficultyCoefficientNumerator,
      _table.difficultyCoefficientDenominator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(MaterialId materialId, MaterialMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.tokenAddress,
      _table.difficultyCoefficientNumerator,
      _table.difficultyCoefficientDenominator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (address tokenAddress, uint32 difficultyCoefficientNumerator, uint32 difficultyCoefficientDenominator)
  {
    tokenAddress = (address(Bytes.getBytes20(_blob, 0)));

    difficultyCoefficientNumerator = (uint32(Bytes.getBytes4(_blob, 20)));

    difficultyCoefficientDenominator = (uint32(Bytes.getBytes4(_blob, 24)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (MaterialMetadataData memory _table) {
    (
      _table.tokenAddress,
      _table.difficultyCoefficientNumerator,
      _table.difficultyCoefficientDenominator
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(MaterialId materialId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(MaterialId materialId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address tokenAddress,
    uint32 difficultyCoefficientNumerator,
    uint32 difficultyCoefficientDenominator
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(tokenAddress, difficultyCoefficientNumerator, difficultyCoefficientDenominator);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address tokenAddress,
    uint32 difficultyCoefficientNumerator,
    uint32 difficultyCoefficientDenominator
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      tokenAddress,
      difficultyCoefficientNumerator,
      difficultyCoefficientDenominator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(MaterialId materialId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(MaterialId.unwrap(materialId));

    return _keyTuple;
  }
}
